
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\064\003\000\002\002\004\000\002\036" +
    "\006\000\002\017\003\000\002\017\003\000\002\022\004" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\023\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\011\003\000\002\042\003" +
    "\000\002\042\005\000\002\004\003\000\002\004\004\000" +
    "\002\005\005\000\002\006\005\000\002\012\003\000\002" +
    "\012\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\013\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\002\010\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\007\005\000\002\025\003" +
    "\000\002\025\005\000\002\025\002\000\002\024\005\000" +
    "\002\003\006\000\002\003\006\000\002\020\005\000\002" +
    "\020\003\000\002\010\003\000\002\010\003\000\002\026" +
    "\003\000\002\026\005\000\002\026\002\000\002\027\005" +
    "\000\002\031\006\000\002\031\006\000\002\030\005\000" +
    "\002\032\010\000\002\032\007\000\002\032\007\000\002" +
    "\021\005\000\002\045\003\000\002\045\005\000\002\046" +
    "\005\000\002\047\003\000\002\047\005\000\002\051\010" +
    "\000\002\052\006\000\002\053\013\000\002\053\015\000" +
    "\002\050\003\000\002\050\003\000\002\050\005\000\002" +
    "\050\005\000\002\054\010\000\002\054\010\000\002\054" +
    "\011\000\002\054\011\000\002\055\005\000\002\055\005" +
    "\000\002\055\004\000\002\055\005\000\002\055\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\003\000\002\060\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\065\006\000\002\065\006\000\002\074\010" +
    "\000\002\066\005\000\002\067\005\000\002\067\005\000" +
    "\002\070\005\000\002\070\005\000\002\071\005\000\002" +
    "\072\004\000\002\072\005\000\002\073\011\000\002\073" +
    "\013\000\002\034\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\033\004\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\036\004\051\011\017\025\014\035\041\036" +
    "\015\043\025\045\026\051\033\053\046\064\036\065\030" +
    "\073\032\074\043\076\012\001\002\000\046\002\uff6d\004" +
    "\uff6d\011\uff6d\025\uff6d\035\uff6d\036\uff6d\043\uff6d\044\uff6d" +
    "\045\uff6d\047\uff6d\050\uff6d\051\uff6d\053\uff6d\064\uff6d\065" +
    "\uff6d\073\uff6d\074\uff6d\076\uff6d\001\002\000\046\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\016\uffe5\020\uffe5\021" +
    "\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\037\uffe5\040\uffe5\001\002\000\046\002" +
    "\uff69\004\uff69\011\uff69\025\uff69\035\uff69\036\uff69\043\uff69" +
    "\044\uff69\045\uff69\047\uff69\050\uff69\051\uff69\053\uff69\064" +
    "\uff69\065\uff69\073\uff69\074\uff69\076\uff69\001\002\000\040" +
    "\002\001\004\051\011\017\025\014\035\041\036\015\043" +
    "\025\045\026\051\033\053\046\064\036\065\030\073\032" +
    "\074\043\076\012\001\002\000\046\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\016\uffe6\020\uffe6\021\uffe6\024\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\037\uffe6\040\uffe6\001\002\000\036\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\013\uff90\016\uff90\026\uff90\027\uff90\030" +
    "\uff90\031\uff90\032\uff90\033\uff90\034\uff90\037\uff90\001\002" +
    "\000\052\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\020\uffef\021\uffef\024\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\037" +
    "\uffef\040\uffef\001\002\000\004\002\330\001\002\000\022" +
    "\004\051\011\017\025\014\035\041\036\015\073\032\074" +
    "\043\076\012\001\002\000\022\004\051\011\017\025\014" +
    "\035\041\036\015\073\032\074\043\076\012\001\002\000" +
    "\046\002\uff6e\004\uff6e\011\uff6e\025\uff6e\035\uff6e\036\uff6e" +
    "\043\uff6e\044\uff6e\045\uff6e\047\uff6e\050\uff6e\051\uff6e\053" +
    "\uff6e\064\uff6e\065\uff6e\073\uff6e\074\uff6e\076\uff6e\001\002" +
    "\000\004\076\012\001\002\000\046\002\uff67\004\uff67\011" +
    "\uff67\025\uff67\035\uff67\036\uff67\043\uff67\044\uff67\045\uff67" +
    "\047\uff67\050\uff67\051\uff67\053\uff67\064\uff67\065\uff67\073" +
    "\uff67\074\uff67\076\uff67\001\002\000\046\002\uff6c\004\uff6c" +
    "\011\uff6c\025\uff6c\035\uff6c\036\uff6c\043\uff6c\044\uff6c\045" +
    "\uff6c\047\uff6c\050\uff6c\051\uff6c\053\uff6c\064\uff6c\065\uff6c" +
    "\073\uff6c\074\uff6c\076\uff6c\001\002\000\032\010\307\011" +
    "\302\012\306\013\315\016\310\026\301\027\320\030\314" +
    "\031\312\032\316\033\317\034\321\001\002\000\046\002" +
    "\uff6b\004\uff6b\011\uff6b\025\uff6b\035\uff6b\036\uff6b\043\uff6b" +
    "\044\uff6b\045\uff6b\047\uff6b\050\uff6b\051\uff6b\053\uff6b\064" +
    "\uff6b\065\uff6b\073\uff6b\074\uff6b\076\uff6b\001\002\000\046" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\016\uffe9\020" +
    "\uffe9\021\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\037\uffe9\040\uffe9\001\002\000" +
    "\036\004\051\011\017\025\014\035\041\036\015\043\025" +
    "\045\026\051\033\053\046\064\036\065\030\073\032\074" +
    "\043\076\012\001\002\000\004\036\264\001\002\000\046" +
    "\002\uff65\004\uff65\011\uff65\025\uff65\035\uff65\036\uff65\043" +
    "\uff65\044\uff65\045\uff65\047\uff65\050\uff65\051\uff65\053\uff65" +
    "\064\uff65\065\uff65\073\uff65\074\uff65\076\uff65\001\002\000" +
    "\032\004\073\011\017\023\103\025\014\035\041\036\015" +
    "\041\102\073\032\074\043\075\071\076\012\077\105\001" +
    "\002\000\046\002\uff68\004\uff68\011\uff68\025\uff68\035\uff68" +
    "\036\uff68\043\uff68\044\uff68\045\uff68\047\uff68\050\uff68\051" +
    "\uff68\053\uff68\064\uff68\065\uff68\073\uff68\074\uff68\076\uff68" +
    "\001\002\000\050\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\016\ufffd\020\ufffd\021\ufffd\024\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\037" +
    "\ufffd\040\ufffd\001\002\000\026\004\073\007\256\011\017" +
    "\023\103\041\102\073\032\074\043\075\071\076\012\077" +
    "\105\001\002\000\036\007\uff8d\010\uff8d\011\uff8d\012\uff8d" +
    "\013\uff8d\016\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\037\uff8d\001\002\000\036\007\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\013\uff8f\016\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\037\uff8f" +
    "\001\002\000\004\004\055\001\002\000\050\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\247\015\250\016\uffe8\020\uffe8" +
    "\021\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\037\uffe8\040\uffe8\001\002\000\036" +
    "\006\201\010\uff8e\011\uff8e\012\uff8e\013\uff8e\016\uff8e\021" +
    "\202\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e" +
    "\034\uff8e\001\002\000\010\004\055\073\032\074\043\001" +
    "\002\000\046\002\uff6a\004\uff6a\011\uff6a\025\uff6a\035\uff6a" +
    "\036\uff6a\043\uff6a\044\uff6a\045\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\053\uff6a\064\uff6a\065\uff6a\073\uff6a\074\uff6a\076\uff6a" +
    "\001\002\000\050\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\016\ufffe\020\ufffe\021\ufffe\024\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\037" +
    "\ufffe\040\ufffe\001\002\000\004\007\154\001\002\000\046" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\016\uffe7\020" +
    "\uffe7\021\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\037\uffe7\040\uffe7\001\002\000" +
    "\032\004\073\011\017\023\103\025\014\035\041\036\015" +
    "\041\102\073\032\074\043\075\071\076\012\077\105\001" +
    "\002\000\052\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\066\015\uffed\016\uffed\020\uffed\021\uffed\024\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\037\uffed\040\uffed\001\002\000\006\007\uff91\037\uff91\001" +
    "\002\000\046\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\015\053\016\uffa6\021\uffa6\023\052\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\037\uffa6" +
    "\001\002\000\010\004\062\011\017\076\012\001\002\000" +
    "\006\004\055\057\056\001\002\000\052\006\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\016\uffa5\020\uffa5\021" +
    "\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\037\uffa5\040\uffa5\001\002\000" +
    "\054\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\015\057\016\uffa6\020\uffa6\021\uffa6\024\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\037\uffa6\040\uffa6\001\002\000\046\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\016\uffae\020\uffae\021\uffae\024\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\037\uffae\040\uffae\001\002\000\004\004\055\001\002" +
    "\000\004\024\065\001\002\000\016\007\uffd1\020\uffd1\021" +
    "\uffd1\024\uffd1\037\uffd1\040\uffd1\001\002\000\006\015\064" +
    "\024\063\001\002\000\046\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\016\uffac\020\uffac\021\uffac\024\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\037" +
    "\uffac\040\uffac\001\002\000\004\057\056\001\002\000\046" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\016\uffad\020" +
    "\uffad\021\uffad\024\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\033\uffad\034\uffad\037\uffad\040\uffad\001\002\000" +
    "\004\076\067\001\002\000\052\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\020\uffee\021" +
    "\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\037\uffee\040\uffee\001\002\000\016\007" +
    "\uffc6\020\uffc6\021\uffc6\024\uffc6\037\uffc6\040\uffc6\001\002" +
    "\000\016\007\uffc8\020\uffc8\021\uffc8\024\uffc8\037\uffc8\040" +
    "\uffc8\001\002\000\034\007\uffd1\010\uff90\011\uff90\012\uff90" +
    "\013\uff90\016\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032" +
    "\uff90\033\uff90\034\uff90\001\002\000\052\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\015\053\016\uffa6\020\uffa6\021" +
    "\uffa6\023\152\024\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\037\uffa6\040\uffa6\001\002\000" +
    "\020\007\uffb3\020\uffb3\021\uffb3\022\134\024\uffb3\037\uffb3" +
    "\040\uffb3\001\002\000\004\007\133\001\002\000\034\007" +
    "\uffc1\010\uff8e\011\uff8e\012\uff8e\013\uff8e\016\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\001" +
    "\002\000\034\007\uffc3\010\uff8d\011\uff8d\012\uff8d\013\uff8d" +
    "\016\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033" +
    "\uff8d\034\uff8d\001\002\000\016\007\uffc4\020\uffc4\021\uffc4" +
    "\024\uffc4\037\uffc4\040\uffc4\001\002\000\004\007\132\001" +
    "\002\000\026\004\073\011\017\023\103\040\uffb9\041\102" +
    "\073\032\074\043\075\071\076\012\077\105\001\002\000" +
    "\026\004\073\011\017\023\103\024\uffaf\041\102\073\032" +
    "\074\043\075\071\076\012\077\105\001\002\000\034\007" +
    "\ufff0\010\uff8f\011\uff8f\012\uff8f\013\uff8f\016\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\001" +
    "\002\000\016\007\uffc2\020\uffc2\021\uffc2\024\uffc2\037\uffc2" +
    "\040\uffc2\001\002\000\020\007\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\024\uffb4\037\uffb4\040\uffb4\001\002\000\016\007\uffc7" +
    "\020\uffc7\021\uffc7\024\uffc7\037\uffc7\040\uffc7\001\002\000" +
    "\016\007\uffb2\020\uffb2\021\uffb2\024\uffb2\037\uffb2\040\uffb2" +
    "\001\002\000\016\007\uffc5\020\uffc5\021\uffc5\024\uffc5\037" +
    "\uffc5\040\uffc5\001\002\000\006\020\120\024\uffb1\001\002" +
    "\000\016\007\uffc1\020\uffc1\021\uffc1\024\uffc1\037\uffc1\040" +
    "\uffc1\001\002\000\016\007\uffc3\020\uffc3\021\uffc3\024\uffc3" +
    "\037\uffc3\040\uffc3\001\002\000\004\024\117\001\002\000" +
    "\020\007\ufff0\020\ufff0\021\ufff0\024\ufff0\035\ufff0\037\ufff0" +
    "\040\ufff0\001\002\000\020\007\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\024\uffb5\037\uffb5\040\uffb5\001\002\000\026\004\073" +
    "\011\017\023\103\024\uffaf\041\102\073\032\074\043\075" +
    "\071\076\012\077\105\001\002\000\004\024\uffb0\001\002" +
    "\000\004\021\130\001\002\000\004\040\127\001\002\000" +
    "\006\020\125\040\uffbb\001\002\000\026\004\073\011\017" +
    "\023\103\040\uffb9\041\102\073\032\074\043\075\071\076" +
    "\012\077\105\001\002\000\004\040\uffba\001\002\000\016" +
    "\007\uffbc\020\uffbc\021\uffbc\024\uffbc\037\uffbc\040\uffbc\001" +
    "\002\000\024\004\073\011\017\023\103\041\102\073\032" +
    "\074\043\075\071\076\012\077\105\001\002\000\006\020" +
    "\uffb8\040\uffb8\001\002\000\046\002\uff77\004\uff77\011\uff77" +
    "\025\uff77\035\uff77\036\uff77\043\uff77\044\uff77\045\uff77\047" +
    "\uff77\050\uff77\051\uff77\053\uff77\064\uff77\065\uff77\073\uff77" +
    "\074\uff77\076\uff77\001\002\000\046\002\uff78\004\uff78\011" +
    "\uff78\025\uff78\035\uff78\036\uff78\043\uff78\044\uff78\045\uff78" +
    "\047\uff78\050\uff78\051\uff78\053\uff78\064\uff78\065\uff78\073" +
    "\uff78\074\uff78\076\uff78\001\002\000\006\004\135\023\103" +
    "\001\002\000\004\023\137\001\002\000\016\007\uffa7\020" +
    "\uffa7\021\uffa7\024\uffa7\037\uffa7\040\uffa7\001\002\000\006" +
    "\021\140\076\012\001\002\000\010\004\145\011\017\076" +
    "\012\001\002\000\006\014\066\021\142\001\002\000\012" +
    "\004\145\011\017\024\143\076\012\001\002\000\020\007" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\024\uffa8\037\uffa8\040\uffa8" +
    "\001\002\000\004\024\uffe8\001\002\000\004\015\064\001" +
    "\002\000\004\024\147\001\002\000\020\007\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\024\uffaa\037\uffaa\040\uffaa\001\002\000" +
    "\004\024\151\001\002\000\020\007\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\024\uffa9\037\uffa9\040\uffa9\001\002\000\012\004" +
    "\062\011\017\021\140\076\012\001\002\000\014\013\uffed" +
    "\014\066\015\uffed\021\142\024\uffed\001\002\000\046\002" +
    "\uff6f\004\uff6f\011\uff6f\025\uff6f\035\uff6f\036\uff6f\043\uff6f" +
    "\044\uff6f\045\uff6f\047\uff6f\050\uff6f\051\uff6f\053\uff6f\064" +
    "\uff6f\065\uff6f\073\uff6f\074\uff6f\076\uff6f\001\002\000\004" +
    "\035\173\001\002\000\004\035\157\001\002\000\004\004" +
    "\160\001\002\000\004\036\161\001\002\000\030\004\073" +
    "\011\017\023\103\035\041\037\162\041\102\073\032\074" +
    "\043\075\071\076\012\077\105\001\002\000\010\007\uff99" +
    "\020\uff99\037\uff99\001\002\000\010\007\uff9d\020\171\037" +
    "\uff9d\001\002\000\010\007\uff9c\020\167\037\uff9c\001\002" +
    "\000\004\037\166\001\002\000\010\007\uff97\020\uff97\037" +
    "\uff97\001\002\000\026\004\073\011\017\023\103\035\041" +
    "\041\102\073\032\074\043\075\071\076\012\077\105\001" +
    "\002\000\006\007\uff9a\037\uff9a\001\002\000\026\004\073" +
    "\011\017\023\103\035\041\041\102\073\032\074\043\075" +
    "\071\076\012\077\105\001\002\000\006\007\uff9b\037\uff9b" +
    "\001\002\000\004\004\174\001\002\000\004\036\175\001" +
    "\002\000\030\004\073\011\017\023\103\035\041\037\176" +
    "\041\102\073\032\074\043\075\071\076\012\077\105\001" +
    "\002\000\010\007\uff98\020\uff98\037\uff98\001\002\000\004" +
    "\037\200\001\002\000\010\007\uff96\020\uff96\037\uff96\001" +
    "\002\000\032\004\073\011\017\023\103\025\014\035\041" +
    "\036\015\041\102\073\032\074\043\075\071\076\012\077" +
    "\105\001\002\000\022\004\215\054\204\055\207\066\214" +
    "\067\212\070\203\071\206\072\211\001\002\000\010\006" +
    "\uffce\017\uffce\020\uffce\001\002\000\004\016\226\001\002" +
    "\000\010\006\uffca\017\uffca\020\uffca\001\002\000\010\006" +
    "\uffcd\017\uffcd\020\uffcd\001\002\000\004\016\221\001\002" +
    "\000\010\006\uffcb\017\uffcb\020\uffcb\001\002\000\010\006" +
    "\uffcc\017\uffcc\020\uffcc\001\002\000\010\006\uffcf\017\uffcf" +
    "\020\uffcf\001\002\000\004\006\216\001\002\000\010\006" +
    "\uffd0\017\uffd0\020\uffd0\001\002\000\010\006\uffc9\017\uffc9" +
    "\020\uffc9\001\002\000\026\004\073\011\017\023\103\035" +
    "\041\041\102\073\032\074\043\075\071\076\012\077\105" +
    "\001\002\000\004\007\220\001\002\000\046\002\uff7a\004" +
    "\uff7a\011\uff7a\025\uff7a\035\uff7a\036\uff7a\043\uff7a\044\uff7a" +
    "\045\uff7a\047\uff7a\050\uff7a\051\uff7a\053\uff7a\064\uff7a\065" +
    "\uff7a\073\uff7a\074\uff7a\076\uff7a\001\002\000\024\004\215" +
    "\054\204\055\207\056\222\066\214\067\212\070\203\071" +
    "\206\072\211\001\002\000\004\017\225\001\002\000\004" +
    "\017\224\001\002\000\010\006\uffb7\017\uffb7\020\uffb7\001" +
    "\002\000\010\006\uffb6\017\uffb6\020\uffb6\001\002\000\024" +
    "\004\215\054\204\055\207\056\227\066\214\067\212\070" +
    "\203\071\206\072\211\001\002\000\004\020\236\001\002" +
    "\000\004\020\231\001\002\000\024\004\215\054\204\055" +
    "\207\056\232\066\214\067\212\070\203\071\206\072\211" +
    "\001\002\000\004\017\235\001\002\000\004\017\234\001" +
    "\002\000\010\006\uffc0\017\uffc0\020\uffc0\001\002\000\010" +
    "\006\uffbe\017\uffbe\020\uffbe\001\002\000\024\004\215\054" +
    "\204\055\207\056\237\066\214\067\212\070\203\071\206" +
    "\072\211\001\002\000\004\017\242\001\002\000\004\017" +
    "\241\001\002\000\010\006\uffbf\017\uffbf\020\uffbf\001\002" +
    "\000\010\006\uffbd\017\uffbd\020\uffbd\001\002\000\004\007" +
    "\246\001\002\000\004\007\245\001\002\000\046\002\uff7b" +
    "\004\uff7b\011\uff7b\025\uff7b\035\uff7b\036\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\047\uff7b\050\uff7b\051\uff7b\053\uff7b\064\uff7b" +
    "\065\uff7b\073\uff7b\074\uff7b\076\uff7b\001\002\000\046\002" +
    "\uff7c\004\uff7c\011\uff7c\025\uff7c\035\uff7c\036\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\047\uff7c\050\uff7c\051\uff7c\053\uff7c\064" +
    "\uff7c\065\uff7c\073\uff7c\074\uff7c\076\uff7c\001\002\000\006" +
    "\011\017\076\012\001\002\000\004\076\012\001\002\000" +
    "\050\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\066" +
    "\016\uffea\020\uffea\021\uffea\024\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\037\uffea\040\uffea" +
    "\001\002\000\046\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\016\uffeb\020\uffeb\021\uffeb\024\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\037\uffeb\040" +
    "\uffeb\001\002\000\004\007\254\001\002\000\046\002\uff79" +
    "\004\uff79\011\uff79\025\uff79\035\uff79\036\uff79\043\uff79\044" +
    "\uff79\045\uff79\047\uff79\050\uff79\051\uff79\053\uff79\064\uff79" +
    "\065\uff79\073\uff79\074\uff79\076\uff79\001\002\000\004\007" +
    "\257\001\002\000\046\002\uff73\004\uff73\011\uff73\025\uff73" +
    "\035\uff73\036\uff73\043\uff73\044\uff73\045\uff73\047\uff73\050" +
    "\uff73\051\uff73\053\uff73\064\uff73\065\uff73\073\uff73\074\uff73" +
    "\076\uff73\001\002\000\046\002\uff72\004\uff72\011\uff72\025" +
    "\uff72\035\uff72\036\uff72\043\uff72\044\uff72\045\uff72\047\uff72" +
    "\050\uff72\051\uff72\053\uff72\064\uff72\065\uff72\073\uff72\074" +
    "\uff72\076\uff72\001\002\000\004\007\263\001\002\000\004" +
    "\007\262\001\002\000\046\002\uff75\004\uff75\011\uff75\025" +
    "\uff75\035\uff75\036\uff75\043\uff75\044\uff75\045\uff75\047\uff75" +
    "\050\uff75\051\uff75\053\uff75\064\uff75\065\uff75\073\uff75\074" +
    "\uff75\076\uff75\001\002\000\046\002\uff76\004\uff76\011\uff76" +
    "\025\uff76\035\uff76\036\uff76\043\uff76\044\uff76\045\uff76\047" +
    "\uff76\050\uff76\051\uff76\053\uff76\064\uff76\065\uff76\073\uff76" +
    "\074\uff76\076\uff76\001\002\000\022\004\051\011\017\025" +
    "\014\035\041\036\015\073\032\074\043\076\012\001\002" +
    "\000\036\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\016" +
    "\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e" +
    "\034\uff8e\037\uff8e\001\002\000\004\037\267\001\002\000" +
    "\004\046\270\001\002\000\036\004\051\011\017\025\014" +
    "\035\041\036\015\043\025\045\026\051\033\053\046\064" +
    "\036\065\030\073\032\074\043\076\012\001\002\000\042" +
    "\004\051\011\017\025\014\035\041\036\015\043\025\045" +
    "\026\047\274\050\272\051\033\053\046\064\036\065\030" +
    "\073\032\074\043\076\012\001\002\000\046\002\uff71\004" +
    "\uff71\011\uff71\025\uff71\035\uff71\036\uff71\043\uff71\044\uff71" +
    "\045\uff71\047\uff71\050\uff71\051\uff71\053\uff71\064\uff71\065" +
    "\uff71\073\uff71\074\uff71\076\uff71\001\002\000\046\002\uff66" +
    "\004\uff66\011\uff66\025\uff66\035\uff66\036\uff66\043\uff66\044" +
    "\uff66\045\uff66\047\uff66\050\uff66\051\uff66\053\uff66\064\uff66" +
    "\065\uff66\073\uff66\074\uff66\076\uff66\001\002\000\036\004" +
    "\051\011\017\025\014\035\041\036\015\043\025\045\026" +
    "\051\033\053\046\064\036\065\030\073\032\074\043\076" +
    "\012\001\002\000\040\004\051\011\017\025\014\035\041" +
    "\036\015\043\025\045\026\050\276\051\033\053\046\064" +
    "\036\065\030\073\032\074\043\076\012\001\002\000\046" +
    "\002\uff70\004\uff70\011\uff70\025\uff70\035\uff70\036\uff70\043" +
    "\uff70\044\uff70\045\uff70\047\uff70\050\uff70\051\uff70\053\uff70" +
    "\064\uff70\065\uff70\073\uff70\074\uff70\076\uff70\001\002\000" +
    "\040\004\051\011\017\025\014\035\041\036\015\043\025" +
    "\044\300\045\026\051\033\053\046\064\036\065\030\073" +
    "\032\074\043\076\012\001\002\000\046\002\uff74\004\uff74" +
    "\011\uff74\025\uff74\035\uff74\036\uff74\043\uff74\044\uff74\045" +
    "\uff74\047\uff74\050\uff74\051\uff74\053\uff74\064\uff74\065\uff74" +
    "\073\uff74\074\uff74\076\uff74\001\002\000\022\004\uff83\011" +
    "\uff83\025\uff83\035\uff83\036\uff83\073\uff83\074\uff83\076\uff83" +
    "\001\002\000\022\004\uff87\011\uff87\025\uff87\035\uff87\036" +
    "\uff87\073\uff87\074\uff87\076\uff87\001\002\000\022\004\051" +
    "\011\017\025\014\035\041\036\015\073\032\074\043\076" +
    "\012\001\002\000\022\004\uff7e\011\uff7e\025\uff7e\035\uff7e" +
    "\036\uff7e\073\uff7e\074\uff7e\076\uff7e\001\002\000\022\004" +
    "\uff7d\011\uff7d\025\uff7d\035\uff7d\036\uff7d\073\uff7d\074\uff7d" +
    "\076\uff7d\001\002\000\022\004\uff86\011\uff86\025\uff86\035" +
    "\uff86\036\uff86\073\uff86\074\uff86\076\uff86\001\002\000\022" +
    "\004\uff88\011\uff88\025\uff88\035\uff88\036\uff88\073\uff88\074" +
    "\uff88\076\uff88\001\002\000\022\004\uff89\011\uff89\025\uff89" +
    "\035\uff89\036\uff89\073\uff89\074\uff89\076\uff89\001\002\000" +
    "\022\004\uff80\011\uff80\025\uff80\035\uff80\036\uff80\073\uff80" +
    "\074\uff80\076\uff80\001\002\000\022\004\uff8c\011\uff8c\025" +
    "\uff8c\035\uff8c\036\uff8c\073\uff8c\074\uff8c\076\uff8c\001\002" +
    "\000\022\004\uff7f\011\uff7f\025\uff7f\035\uff7f\036\uff7f\073" +
    "\uff7f\074\uff7f\076\uff7f\001\002\000\022\004\uff81\011\uff81" +
    "\025\uff81\035\uff81\036\uff81\073\uff81\074\uff81\076\uff81\001" +
    "\002\000\022\004\uff85\011\uff85\025\uff85\035\uff85\036\uff85" +
    "\073\uff85\074\uff85\076\uff85\001\002\000\022\004\uff8b\011" +
    "\uff8b\025\uff8b\035\uff8b\036\uff8b\073\uff8b\074\uff8b\076\uff8b" +
    "\001\002\000\022\004\uff84\011\uff84\025\uff84\035\uff84\036" +
    "\uff84\073\uff84\074\uff84\076\uff84\001\002\000\022\004\uff82" +
    "\011\uff82\025\uff82\035\uff82\036\uff82\073\uff82\074\uff82\076" +
    "\uff82\001\002\000\022\004\uff8a\011\uff8a\025\uff8a\035\uff8a" +
    "\036\uff8a\073\uff8a\074\uff8a\076\uff8a\001\002\000\036\007" +
    "\uff95\010\307\011\302\012\306\013\315\016\310\026\301" +
    "\027\320\030\314\031\312\032\316\033\317\034\321\037" +
    "\uff95\001\002\000\006\007\uff94\037\uff94\001\002\000\052" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\066\015" +
    "\uffec\016\uffec\020\uffec\021\uffec\024\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\037\uffec\040" +
    "\uffec\001\002\000\004\037\326\001\002\000\006\007\uff92" +
    "\037\uff92\001\002\000\006\007\uff93\037\uff93\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\062\004\036\005\007\006\004\012\044\016" +
    "\010\017\034\027\023\031\033\033\006\034\026\042\046" +
    "\045\037\054\047\055\043\056\021\064\012\065\003\066" +
    "\020\067\022\070\041\071\005\072\030\073\017\074\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\004\036\005\007\006\004\012\044\016\010" +
    "\017\034\027\023\031\033\034\272\042\046\045\037\054" +
    "\047\055\043\056\021\065\003\066\020\067\022\070\041" +
    "\071\005\072\030\073\017\074\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\036\005\007\006\004\012\044\016\010\017" +
    "\034\027\023\031\033\042\046\045\264\054\047\055\326" +
    "\056\021\001\001\000\034\004\036\005\007\006\004\012" +
    "\044\016\010\017\034\027\023\031\033\042\046\045\264" +
    "\054\047\055\324\056\021\001\001\000\002\001\001\000" +
    "\004\042\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\057\310\060\312\061\303\062\304\063\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\004\036" +
    "\005\007\006\004\012\044\016\010\017\034\027\023\031" +
    "\033\033\276\034\026\042\046\045\037\054\047\055\043" +
    "\056\021\065\003\066\020\067\022\070\041\071\005\072" +
    "\030\073\017\074\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\004\036\005\007\006\004\007\110\010" +
    "\077\011\106\012\044\013\067\016\071\017\103\020\073" +
    "\021\107\027\023\031\076\032\105\042\046\044\257\045" +
    "\075\054\047\055\260\056\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\004\036\005\007\006\004\007" +
    "\110\010\077\011\106\012\044\013\067\016\060\017\115" +
    "\020\073\021\107\027\023\031\113\032\105\042\046\044" +
    "\254\045\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\155\017\115\045\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\004\036\005\007\006\004\007\110\010\077" +
    "\011\106\012\044\013\067\016\071\017\103\020\073\021" +
    "\107\027\023\031\076\032\105\042\046\044\074\045\075" +
    "\054\047\055\100\056\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\036\005\007" +
    "\006\004\012\044\013\057\016\060\027\023\042\046\001" +
    "\001\000\004\045\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\004\036\005\007\006" +
    "\004\007\110\010\077\011\106\012\044\013\067\016\060" +
    "\017\115\020\073\021\107\024\123\025\122\027\023\031" +
    "\113\032\105\042\046\044\121\045\112\001\001\000\050" +
    "\004\036\005\007\006\004\007\110\010\077\011\106\012" +
    "\044\013\067\016\060\017\115\020\073\021\107\026\114" +
    "\027\023\031\113\032\105\042\046\044\111\045\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\004" +
    "\036\005\007\006\004\007\110\010\077\011\106\012\044" +
    "\013\067\016\060\017\115\020\073\021\107\026\120\027" +
    "\023\031\113\032\105\042\046\044\111\045\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\004\036\005\007\006\004\007\110" +
    "\010\077\011\106\012\044\013\067\016\060\017\115\020" +
    "\073\021\107\024\123\025\125\027\023\031\113\032\105" +
    "\042\046\044\121\045\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\004\036\005\007\006\004\007\110" +
    "\010\077\011\106\012\044\013\067\016\060\017\115\020" +
    "\073\021\107\027\023\031\113\032\105\042\046\044\130" +
    "\045\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\135\032\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\140\001\001\000" +
    "\012\004\143\012\147\027\023\042\046\001\001\000\002" +
    "\001\001\000\012\004\143\012\145\027\023\042\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\036\005\007\006\004\012\044" +
    "\013\057\016\060\027\023\042\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\004\036\005" +
    "\007\006\004\007\110\010\077\011\106\012\044\013\067" +
    "\016\060\017\115\020\073\021\107\027\023\031\113\032" +
    "\105\042\046\044\162\045\112\050\164\054\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\036\005\007" +
    "\006\004\007\110\010\077\011\106\012\044\013\067\016" +
    "\060\017\115\020\073\021\107\027\023\031\113\032\105" +
    "\042\046\044\162\045\112\050\167\054\163\001\001\000" +
    "\002\001\001\000\052\004\036\005\007\006\004\007\110" +
    "\010\077\011\106\012\044\013\067\016\060\017\115\020" +
    "\073\021\107\027\023\031\113\032\105\042\046\044\162" +
    "\045\112\050\171\054\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\036\005\007" +
    "\006\004\007\110\010\077\011\106\012\044\013\067\016" +
    "\060\017\115\020\073\021\107\027\023\031\113\032\105" +
    "\042\046\044\162\045\112\050\176\054\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\004\036\005\007\006\004\007\110\010\077\011\106\012" +
    "\044\013\067\016\071\017\103\020\073\021\107\027\023" +
    "\031\076\032\105\042\046\044\242\045\075\054\047\055" +
    "\243\056\021\001\001\000\010\002\204\003\207\043\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\036\005\007" +
    "\006\004\007\110\010\077\011\106\012\044\013\067\016" +
    "\060\017\115\020\073\021\107\027\023\031\113\032\105" +
    "\042\046\044\162\045\112\050\216\054\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\204\003\207" +
    "\043\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\204\003\207" +
    "\043\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\204\003\207\043\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\204\003\207\043\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\251\042\046\001\001\000\004\042" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\036\005" +
    "\007\006\004\012\044\016\010\017\034\027\023\031\033" +
    "\042\046\045\264\054\047\055\265\056\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\004\036\005\007\006\004\012\044\016\010\017\034\027" +
    "\023\031\033\033\270\034\026\042\046\045\037\054\047" +
    "\055\043\056\021\065\003\066\020\067\022\070\041\071" +
    "\005\072\030\073\017\074\015\001\001\000\056\004\036" +
    "\005\007\006\004\012\044\016\010\017\034\027\023\031" +
    "\033\034\272\042\046\045\037\054\047\055\043\056\021" +
    "\065\003\066\020\067\022\070\041\071\005\072\030\073" +
    "\017\074\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\004\036\005\007\006\004\012\044\016\010\017" +
    "\034\027\023\031\033\033\274\034\026\042\046\045\037" +
    "\054\047\055\043\056\021\065\003\066\020\067\022\070" +
    "\041\071\005\072\030\073\017\074\015\001\001\000\056" +
    "\004\036\005\007\006\004\012\044\016\010\017\034\027" +
    "\023\031\033\034\272\042\046\045\037\054\047\055\043" +
    "\056\021\065\003\066\020\067\022\070\041\071\005\072" +
    "\030\073\017\074\015\001\001\000\002\001\001\000\056" +
    "\004\036\005\007\006\004\012\044\016\010\017\034\027" +
    "\023\031\033\034\272\042\046\045\037\054\047\055\043" +
    "\056\021\065\003\066\020\067\022\070\041\071\005\072" +
    "\030\073\017\074\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\036\005\007\006" +
    "\004\012\044\016\010\017\034\027\023\031\033\042\046" +
    "\045\264\054\047\055\322\056\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\057\310\060\312\061\303\062\304\063\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



      public boolean syntaxErrors;
      public void syntax_error(Symbol current_token) {  
          report_error(
              "Syntax error at line " + (current_token.left+1) + ", column "
      + current_token.right, null
          );
      }

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // test ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= test EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // let_bind ::= LET IDENTIFIER EQUAL full_exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
               Node n = new Node("LET");
               n.addChild(new Node(i));
               n.addChild((Node)e);
               RESULT = n;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("let_bind",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bool_duo ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_duo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bool_duo ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_duo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bool_ops ::= EXCLAM bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bool_ops ::= bool_duo AND bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bool_ops ::= bool_duo OR bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bool_ops ::= bool_duo IMPL bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bool_ops ::= bool_duo EQ bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bool_ops ::= bool_duo DIFF bool_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bool_ops_plus ::= bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bool_ops_plus ::= bool_duo AND bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bool_ops_plus ::= bool_duo OR bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bool_ops_plus ::= bool_duo IMPL bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool_ops_plus ::= bool_duo EQ bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bool_ops_plus ::= bool_duo DIFF bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_ops_plus",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bool_val ::= bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_val",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // number ::= number UNDERSCORE INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // int_val ::= number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_val",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // int_val ::= MINUS number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_val",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rat_val ::= int_val DIV int_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rat_val",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // float_val ::= int_val DOT number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float_val",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // int_number ::= len_property 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_number",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // int_number ::= int_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_number",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numeric_regrouped ::= int_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_regrouped",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numeric_regrouped ::= rat_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_regrouped",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numeric_regrouped ::= float_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_regrouped",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // numeric_ops_plus ::= numeric_regrouped 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // numeric_ops_plus ::= numeric_regrouped PLUS numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numeric_ops_plus ::= numeric_regrouped MINUS numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numeric_ops_plus ::= numeric_regrouped MULT numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numeric_ops_plus ::= numeric_regrouped DIV numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numeric_ops_plus ::= numeric_regrouped EXPO numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // numeric_ops_plus ::= numeric_regrouped EQ numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // numeric_ops_plus ::= numeric_regrouped DIFF numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // numeric_ops_plus ::= numeric_regrouped LCROCHET numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // numeric_ops_plus ::= numeric_regrouped INFEQ numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops_plus",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // numeric_ops ::= numeric_regrouped PLUS numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // numeric_ops ::= numeric_regrouped MINUS numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // numeric_ops ::= numeric_regrouped MULT numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // numeric_ops ::= numeric_regrouped DIV numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // numeric_ops ::= numeric_regrouped EXPO numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // numeric_ops ::= numeric_regrouped EQ numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // numeric_ops ::= numeric_regrouped DIFF numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // numeric_ops ::= numeric_regrouped LCROCHET numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // numeric_ops ::= numeric_regrouped INFEQ numeric_ops_plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_ops",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // numeric_val ::= numeric_regrouped 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_val",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // all_types ::= TYPE_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // all_types ::= TYPE_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // all_types ::= TYPE_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // all_types ::= TYPE_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // all_types ::= TYPE_RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // all_types ::= type_seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // all_types ::= type_dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // all_types ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // all_types_val ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // all_types_val ::= bool_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // all_types_val ::= numeric_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // all_types_val ::= dict_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // all_types_val ::= seq_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // all_types_val ::= index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // all_types_val ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // all_types_val ::= identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types_val",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_dict ::= DICT LCROCHET all_types COMMA all_types RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type_dict ::= DICT LCROCHET TOP COMMA all_types RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type_dict ::= DICT LCROCHET all_types COMMA TOP RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type_dict ::= DICT LCROCHET TOP COMMA TOP RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_dict",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dict_val ::= LBRA dict_content RBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_val",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dict_content ::= dict_obj 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dict_content ::= dict_obj COMMA dict_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dict_content ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dict_obj ::= all_types_val COLON all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_obj",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type_seq ::= SEQ LCROCHET all_types RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_seq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type_seq ::= SEQ LCROCHET TOP RCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_seq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // seq_temp ::= LAGRA seq_content RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_temp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // seq_temp ::= slice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_temp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // seq_val ::= seq_temp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_val",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // seq_val ::= seq_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_val",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // seq_content ::= all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_content",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // seq_content ::= all_types_val COMMA seq_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_content",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // seq_content ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_content",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // len_property ::= IDENTIFIER DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("len_property",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // index ::= IDENTIFIER LAGRA numeric_val RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // index ::= IDENTIFIER LAGRA IDENTIFIER RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // in_property ::= all_types_val IN all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_property",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // slice ::= IDENTIFIER LAGRA number COLON int_number RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // slice ::= IDENTIFIER LAGRA COLON int_number RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // slice ::= IDENTIFIER LAGRA number COLON RAGRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // seq_concat ::= seq_temp DOUBLE_COLON seq_temp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // identifiers ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // identifiers ::= IDENTIFIER DOT identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declaration ::= IDENTIFIER COLON all_types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaration_list ::= declaration COMMA declaration_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type_definition ::= TDEF IDENTIFIER LBRA declaration_list RBRA SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // alias_definition ::= ALIAS all_types all_types SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_definition",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // func_definition ::= FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRA statements RBRA SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_definition",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // func_definition ::= FDEF IDENTIFIER LPAREN declaration_list RPAREN LBRA statements RBRA COLON all_types SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_definition",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parameters_list ::= all_types_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameters_list ::= func_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameters_list ::= all_types_val COMMA parameters_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parameters_list ::= func_call COMMA parameters_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // func_call ::= QUESTION bool_val QUESTION IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // func_call ::= QUESTION identifiers QUESTION IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // func_call ::= QUESTION bool_val QUESTION IDENTIFIER LPAREN parameters_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // func_call ::= QUESTION identifiers QUESTION IDENTIFIER LPAREN parameters_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exp ::= exp_content binary_operators exp_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exp ::= exp_content binary_operators exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exp ::= EXCLAM exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp ::= func_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp_content ::= numeric_regrouped 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exp_content ::= bool_duo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exp_content ::= identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp_content ::= index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_content",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // comparison_operators_num_bool ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num_bool",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // comparison_operators_num_bool ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num_bool",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // comparison_operators_num ::= INFEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // comparison_operators_num ::= LCROCHET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operators_num",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // numeric_operators ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // numeric_operators ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // numeric_operators ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // numeric_operators ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // numeric_operators ::= EXPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_operators",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // boolean_operators ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // boolean_operators ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // boolean_operators ::= IMPL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operators",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // binary_operators ::= comparison_operators_num_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // binary_operators ::= comparison_operators_num 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // binary_operators ::= numeric_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // binary_operators ::= boolean_operators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_operators",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // var_assigment ::= identifiers EQUAL all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assigment",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // var_assigment ::= identifiers EQUAL exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_assigment",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // var_init ::= identifiers COLON all_types EQUAL parameters_list SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_init",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // read_var ::= READ identifiers SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_var",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // print_var ::= PRINT all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_var",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // print_var ::= PRINT exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_var",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // return ::= RETURN all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // return ::= RETURN exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // loop ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // break ::= BREAK SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // break ::= BREAK all_types_val SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // if_statement ::= IF LPAREN exp RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // if_statement ::= IF LPAREN exp RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statement ::= exp SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // statement ::= var_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement ::= var_assigment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statement ::= read_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // statement ::= print_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // statement ::= return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // statement ::= break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
